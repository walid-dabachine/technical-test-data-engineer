[tool.poetry]
name = "technical-test-data-engineer"
version = "0.1.0"
description = "Data pipelines extracting data sources from Spotify API to serve AI-based music recommendation use cases"
authors = ["Walid Dabachine <dabachine_walid@yahoo.fr>"]
readme = "README.md"
package-mode = true
packages = [
    { include = "moovitamix_data_connector", from = "src" },
    { include = "moovitamix_fastapi", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.9, <=3.13"
Faker = "26.0.0"
fastapi = "0.111.0"
uvicorn = "0.30.1"
fastapi-pagination = "0.12.26"
pytest = "8.2.2"
pandas = "2.1.4"
requests = "2.31.0"
pydantic = "2.8.2"
kedro = "0.19.6"
kedro-datasets = { version = "4.0.0", extras = ["pandas-parquetdataset"] }
ruff = "0.5.1"
pyyaml = "6.0.1"
pyarrow = "16.1.0"
prefect = "2.19.7"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

#TODO: Complete the Kedro setup
[tool.kedro]
package_name = "moovitamix_api_connector"
project_name = "Moovitamix"
kedro_init_version = "0.19.6"
tools = ['None']
example_pipeline = "False"
source_dir = "src"

[tool.ruff]
line-length = 88
show-fixes = true
select = [
    "F",   # Pyflakes
    "W",   # pycodestyle
    "E",   # pycodestyle
    "I",   # isort
    "UP",  # pyupgrade
    "PL",  # Pylint
    "T201", # Print Statement
]
ignore = ["E501"]  # Ruff format takes care of line-too-long